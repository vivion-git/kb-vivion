## reset

sometimes you made some changes, but later you regret it, so you want to go back

then `git reset` is what you need 

### throw away the uncommited changes

	git reset --hard HEAD

### throw a bad commit 

	git reset --hard HEAD^

## what is "--cached"?

`working directory`: everything in `kb-vivion` except `.git/`

`staging area`	: `.git/index`

`git repo`	: `.git`

if you run `git add newFile`, then, this file is added to staging area,
so you need to use `git diff --cached` to view the diff(the difference netween "staging area" and "repo")

## common workflow
1.	navigate to your working dir, e.g

		cd kb-vivion

2.	make some modification, e.g

		vim git #do some editing here

3.	check what you've changed

		git diff # you need use "git diff --cached" if you "git add newFile"

4.	if you add a new file named `newFile`, you need to do this

		git add newFile

5.	otherwise you can use the below to commit directly

		git commit -a -m "commit msg"

6.	now it is done, you can use `tig`, or `gitk` to view your history
## commit: 

commit means you want to put things into git repo

	git commit -a -m "commit msg"	

## change editor

	git config --global core.editor vim

`git config`: try to change configuration,

if you use `--global`, it will change `~/.gitconfig`

otherwise, it will change `.git/config`

if you use `--global`, your change will affect all your git repos

otherwise, it only has effect on the repo within which you run `git config` command


